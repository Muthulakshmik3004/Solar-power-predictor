# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wu-AU_8vzIQy0d0gcUeBRgtn8zr-IU1-
"""

import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

import joblib

df = pd.read_csv("spg.csv")  # Make sure this file is in the same folder
df.head()

df.head()

print(df.info())
print(df.isnull().sum())

df.shape

df.describe().T

df.duplicated().sum()

# Drop the target column to get features
X = df.drop(columns=["generated_power_kw"])
y = df["generated_power_kw"]

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(n_estimators=150, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print("📊 Mean Absolute Error (MAE):", mae)
print("📊 Root Mean Squared Error (RMSE):", rmse)
print("📈 R² Score:", r2)

joblib.dump(model, "solar_power_model.pkl", compress=3)

import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Load trained model
model = joblib.load("solar_power_model.pkl")

# Page config
st.set_page_config(page_title="🔆 Solar Power Forecast", page_icon="☀️", layout="centered")

# Custom CSS styling
st.markdown("""
    <style>
    .main {
        background-color: #f7f9fc;
    }
    .stApp {
        background: linear-gradient(to bottom right, #fdfcfb, #e2d1c3);
    }
    .title {
        font-size: 38px;
        font-weight: bold;
        color: #FF7F50;
    }
    .subtitle {
        font-size: 18px;
        color: #444;
        margin-top: -10px;
    }
    .stTextInput > div > div > input {
        background-color: #fff7f5;
        color: #000;
    }
    .stButton>button {
        background-color: #FF7F50;
        color: white;
        font-weight: bold;
        border-radius: 12px;
        padding: 8px 20px;
    }
    .stSuccess {
        background-color: #d4edda !important;
        color: #155724 !important;
    }
    </style>
""", unsafe_allow_html=True)

# Header
st.markdown('<p class="title">🔆 Solar Power Generation Predictor</p>', unsafe_allow_html=True)
st.markdown('<p class="subtitle">Enter the weather conditions to estimate solar power output (in kW)</p>', unsafe_allow_html=True)

# Input features
feature_names = [
    "temperature_2_m_above_gnd",
    "relative_humidity_2_m_above_gnd",
    "mean_sea_level_pressure_MSL",
    "total_precipitation_sfc",
    "snowfall_amount_sfc",
    "total_cloud_cover_sfc",
    "high_cloud_cover_high_cld_lay",
    "medium_cloud_cover_mid_cld_lay",
    "low_cloud_cover_low_cld_lay",
    "shortwave_radiation_backwards_sfc",
    "wind_speed_10_m_above_gnd",
    "wind_direction_10_m_above_gnd",
    "wind_speed_80_m_above_gnd",
    "wind_direction_80_m_above_gnd",
    "wind_speed_900_mb",
    "wind_direction_900_mb",
    "wind_gust_10_m_above_gnd",
    "angle_of_incidence",
    "zenith",
    "azimuth"
]

# Input section
st.markdown("---")
st.subheader("🔢 Input Weather Data")
user_input = []
cols = st.columns(2)

for idx, feature in enumerate(feature_names):
    value = cols[idx % 2].text_input(f"{feature.replace('_', ' ').capitalize()}:", value="0.0")
    try:
        user_input.append(float(value))
    except ValueError:
        st.error(f"Please enter a valid number for {feature}")

# Predict
st.markdown("---")
if st.button("📈 Predict Power Generation"):
    input_array = np.array(user_input).reshape(1, -1)
    prediction = model.predict(input_array)[0]
    st.success(f"✅ Predicted Solar Power Output: **{prediction:.2f} kW**")